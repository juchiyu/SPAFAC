---
title: "Applying sparse DiMCA to the math questionnaire data-set"
author: "Ju-Chi.Yu & Vincent Guillemot"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
output:
  rmdformats::downcute:
    highlight: kate
    df_print: paged
    code_folding: hide
  pdf_document: default
always_allow_html: true
knit: (function(inputFile, encoding) { 
          rmarkdown::render(inputFile,
                        encoding=encoding, 
                        output_file='sparseMCA_20230417.html') })
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# devtools::load_all("~/git/sGSVD")
# devtools::load_all("~/git/SPAFAC")
library(ExPosition)
library(FactoMineR)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(sGSVD)
library(SPAFAC)
library(superheat)
library(PTCA4CATA)
library(tidyverse)
library(data4PCCAR)
library(inlmisc)
library(pheatmap)
library(openxlsx)
library(TInPosition)
# Libraries for the little hat
library(grid)
library(gridExtra)
library(tikzDevice)

# source("../functions/PlotFactor.R")
source("../functions/plot.sca.results.R")
source("../functions/plot.sdica.results.R")
# source("../functions/createxyLabels.gen.digit.R")
# source("../functions/createLabel.gen.digit.R")
source("../functions/plot.smca.results.R")
source("../functions/createxyLabels.gen.tikz.R")
source("../functions/PlotMyScreeTikz.R")
# source("../functions/PlotMyScree.R")
source("../functions/PrettyBarPlot.MuSu_with_levels.R")

text_size <- 8

# other functions
extract_si <- function(sdimca, si = "SI") {
  if (class(sdimca) == "list") {
    return(sdimca$sparsity$SI[[si]])
  } else if (is.na(sdimca)) {
    return(NA)
  } else {
    stop("Something is a foot!")
  }
}

pivot_the_tab <- function(dat) {
  df <- data.frame(V = unname(t(data.frame(dat))))
  df %>% 
    tidyr::pivot_longer(starts_with("V"), names_to = "k", names_prefix = "V\\.") %>%
    select(value) %>% purrr::as_vector() %>% unname()
}
```

# Data

```{r read}
dat <- read.xlsx("../../01_data/SpaFac_sMCA_sDiCA_Data/MACS-SpaFac-Data.xlsx")[-c(37, 81, 421, 405, 456), ]
math_q <- data.frame(lapply(dat[, grep("Math_Q[0-9]+", colnames(dat))], as.numeric))
math_q_fac <- data.frame(lapply(dat[, grep("Math_Q[0-9]+", colnames(dat))], factor))

## Type of question
grp <- rep("", 30)
# Basic Arithmetic Skills: 1, 15, 16, 17, 23
grp[c(1, 15, 16, 17, 23)] <- "Arith"
# Basic Algebraic Skills: 6, 9, 10, 11, 12, 13, 14, 24
grp[c(6, 9, 10, 11, 12, 13, 14, 24)] <- "Algebra"
# Decimals, fractions, Percentages: 2, 3, 4, 5, 8, 18, 19, 25, 26, 27, 28, 29
grp[c(2, 3, 4, 5, 8, 18, 19, 25, 26, 27, 28, 29)] <- "DecFracPerc"
# Categorization and ranges: 7, 21, 22
grp[c(7, 21, 22)] <- "CatRang"
# Visual understanding: 20, 30
grp[c(20, 30)] <- "Visual"

# Color the groups
grp.col <- RColorBrewer::brewer.pal(5, "Set1")[factor(grp)]
# Color the grades
grade.col <- c(AB = "#489145", C = "#F29305", DF = "#DB1825")
```

# DiMCA {.tabset}


```{r dimca}
y <- car::recode(dat$Exam123Corr, "c('A','B')='AB';c('D','F')='DF'")
colnames(math_q_fac) <- gsub("_", "", colnames(math_q_fac))
res.dimca <- tepDICA.inference.battery(DATA = math_q_fac, make_data_nominal = TRUE, DESIGN = y, make_design_nominal = TRUE, graph = FALSE)
```

## Individual Factor Map

```{r dimca.fii}
set.seed(5469)
# Labels
dimca.labels <- createxyLabels.gen.tikz(1, 2,
  lambda = res.dimca$Fixed.Data$TExPosition.Data$eigs,
  tau = round(res.dimca$Fixed.Data$TExPosition.Data$t),
  axisName = "Component "
)

# Individual factor map
dimca.fi <- res.dimca$Fixed.Data$TExPosition.Data$fi
rownames(dimca.fi) <- gsub("\\.", "", rownames(dimca.fi))
fm.dimca.fi <- createFactorMap(
  dimca.fi,
  col.points = grade.col,
  col.labels = grade.col,
  text.cex = 2,
  cex = 2,
  pch = 16, 
  alpha.labels = 1,
  col.background = NULL,
  col.axes = "orchid4",
  alpha.axes = 0.5, 
  constraints = list(
    minx = -0.4, 
    miny = -0.13, 
    maxx = 0.35, 
    maxy = 0.07))

# Make CI ellipses
dimcaCI <- MakeCIEllipses(
  res.dimca$Inference.Data$boot.data$fi.boot.data$boots,
  axis1 = 1, axis2 = 2, 
  names.of.factors = paste0("Dimension ", c(1:2)),
  col = grade.col, 
  p.level = .95, line.size = 0.2, 
  alpha.line = 0.2, alpha.ellipse = 0.05)

dimca.fi.plot <- fm.dimca.fi$zeMap_background + dimcaCI + fm.dimca.fi$zeMap_dots + fm.dimca.fi$zeMap_text + dimca.labels + theme(axis.title = element_text(size = 8, color = "#42376B"), axis.text = element_text(size = 8, color = "#42376B"), title = element_text(size = 8, color = "#42376B"), panel.border = element_rect(size = 1.5, color = "#42376B", fill = NA)) + ggtitle("DiMCA: factor scores of \ngrades (rows)")

dimca.fi.plot

```

## Items factor map


```{r dimca.fj}
fm.dimca.fj <- PTCA4CATA::createFactorMap(
  res.dimca$Fixed.Data$TExPosition.Data$fj,
  col.points = rep(grp.col, e = 2),
  col.labels = rep(grp.col, e = 2),
  text.cex = 2,
  alpha.labels = 0.5,
  col.background = NULL,
  col.axes = "orchid4",
  alpha.axes = 0.5)

dimca.fj.plot <- fm.dimca.fj$zeMap_background + fm.dimca.fj$zeMap_dots + fm.dimca.fj$zeMap_text + dimca.labels + theme(axis.title = element_text(size = 8, color = "#42376B"), axis.text = element_text(size = 8, color = "#42376B"), title = element_text(size = 8, color = "#42376B"), panel.border = element_rect(size = 1.5, color = "#42376B", fill = NA)) + ggtitle("DiMCA: factor scores of \nquestions (columns)")

dimca.fj.plot
```


# Sparsity index

```{r allparz, cache = TRUE, include = FALSE, message = FALSE, warning = FALSE}
### Run iterations
K <- 3L

I <- 3
J <- length(unique(grp))

parz <- expand.grid(
  rdsleft = seq(sqrt(I), 1, length = 3),
  rdsright = seq(sqrt(J), 1, length = 10))

parz <- parz[order(rowSums(parz^2/c(I,J)), decreasing = T), ]

iter <- 1
res.sparseDiMCA.list <- NULL
U0 <- NULL
V0 <- NULL

for (rds.iter in 1:nrow(parz)) {
  cat(sprintf("Left radius: %0.2f - Right radius: %0.2f\n", parz[rds.iter, 1], parz[rds.iter, 2]))
  res.sparseDiMCA.list[[iter]] <- tryCatch(
    sparseDiCA(DATA = math_q_fac, 
               design = y,
               ca.type = "mca", components = K, 
               make_data_nominal = TRUE,
               make_design_nominal = TRUE,
               rdsLeft = rep(parz[rds.iter, 1], K), 
               rdsRight = rep(parz[rds.iter, 2], K), 
               initLeft = U0, initRight = V0,
               grpLeft = NULL, grpRight = rep(grp, each = 2)), error = function(e) NA
  )
  # if (!is.na(res.sparseDiMCA.list[[iter]])){
    U0 <- res.sparseDiMCA.list[[iter]]$gsvd$p
    V0 <- res.sparseDiMCA.list[[iter]]$gsvd$q
  # }
  iter <- iter + 1
}

### record results
dat.si <- data.frame(
  parz = unname(parz), 
  SI = unname(t(sapply(res.sparseDiMCA.list, extract_si, "SI"))),
  fit = unname(t(sapply(res.sparseDiMCA.list, extract_si, "r1"))),
  zeros = unname(t(sapply(res.sparseDiMCA.list, extract_si, "r4"))))

dat.fit.zeros <- dat.si %>% 
  tidyr::pivot_longer(
    -c(parz.1, parz.2),
    names_to = c(".value", "k"),
    names_pattern = "(.*)\\.(.*)")

theta <- seq(pi, 3/2*pi, length.out = 150)
```

```{r fitzeroratioplot}
dimcol <- inlmisc::GetColors(n = 3, scheme = "discrete rainbow")
names(dimcol) <- as.factor(c(3:1))
# dimcol <- dimcol[c("2","3","4","5","6","7")]
dimcol["2"] <- "#f7c856"


dat.fit.zeros %<>% 
  # filter(k %in% c("2", "3", "4", "5")) %>%
  mutate(alpha = ifelse(
    SI == max(SI[k > 1]), 1, 0.2))

dat.fit.zeros.MAX <- dat.fit.zeros %>%
  filter(SI == max(SI[k > 1]))

siplot <- dat.fit.zeros %>%
  ggplot(aes(zeros, fit)) + 
  geom_hline(yintercept = 1, color = "#42376B", alpha = 0.6, linetype = 3) + 
  geom_vline(xintercept = 1, color = "#42376B", alpha = 0.6, linetype = 3) + 
  lapply(seq(0.25, 1.25, by = 0.25), 
         function(r) annotate("path",
                              x = 1 + r*cos(theta),
                              y = 1 + r*sin(theta),
                              color = "#42376B")) + 
  lapply(seq(0.125, 1.5, by = 0.25), 
         function(r) annotate("path",
                              x = 1 + r*cos(theta),
                              y = 1 + r*sin(theta),
                              color = "#42376B", size = 0.2))  +
  geom_abline(intercept = 0, slope = 1, color = "#42376B", 
              alpha = 0.6, linetype = 3) +
  geom_point(aes(color = k, alpha = I(alpha))) +
  scale_color_manual(values = dimcol[1:3]) +
  theme_bw() + 
  coord_equal(xlim = 0:1, ylim = 0:1) +
  guides(fill = "none", size = "none") +
  labs(x = "Zero ratio", y = "Fit ratio", color = "Number of\nDimensions",
       size = "Sparsity\nIndex", fill = "Number of\nDimensions") + 
  theme(
    # axis.title = element_text(color = "#42376B"),
    # axis.text = element_text(color = "#42376B"),
    # title = element_text(color = "#42376B"),
    axis.title = element_text(size = text_size, color = "#42376B"),
    axis.text = element_text(size = text_size, color = "#42376B"),
    title = element_text(size = text_size, color = "#42376B"),
    panel.border = element_rect(size = 1.5, color = "#42376B", fill = NA),
    plot.margin = unit(c(0.1,0,0,0), unit = "cm"),
    panel.grid = element_blank(),
    legend.key.size = unit(0.1, "cm"),
    legend.text = element_text(size = 6),
    legend.position = "right",
    legend.spacing.x = unit(0.05, "cm"),
    legend.margin = margin(0,0,0,0),
    legend.box.margin = margin(-5,0,0,0),
    legend.title.align = 0,
    legend.title = element_text(size = 6)) +
  with(dat.fit.zeros.MAX, 
       annotate(geom = "point", x = zeros, y = fit,
                color = "darkorchid4", shape = 21, fill = NA)) +
  with(dat.fit.zeros.MAX, 
       annotate(geom = "segment", 
                x = zeros + 0.15, y = fit + 0.2,
                xend = zeros + 0.02, yend = fit + 0.02, 
                arrow = arrow(length = unit(0.05, "inches"), type = "closed"),
                color = "darkorchid4", size = .6)) +
  with(dat.fit.zeros.MAX, 
       annotate(geom = "label", x = zeros + 0.16, y = fit + 0.2, 
                color = "darkorchid4", label = substring(sprintf("%.3f", SI), 2), 
                # fill = scales::alpha(colorspace::lighten(dimcol["2"], .6), 1), 
                fill = dimcol["2"], 
                size = 2.5))

siplot


```




# sDiMCA results

```{r optimal results}
dat.fit.zeros.minus1 <- dat.fit.zeros %>% filter(k > 1)
kopt <- as.integer(dat.fit.zeros.minus1$k[which.max(dat.fit.zeros.minus1$SI)])
rdsleftopt <- dat.fit.zeros.minus1$parz.1[which.max(dat.fit.zeros.minus1$SI)]
rdsrightopt <- dat.fit.zeros.minus1$parz.2[which.max(dat.fit.zeros.minus1$SI)]
SIopt <- max(dat.fit.zeros.minus1$SI, na.rm = TRUE)

kopt;rdsleftopt/sqrt(I);rdsrightopt/sqrt(J);SIopt
```


```{r sparse DiMCA, cache = TRUE}
res.sparseDiMCA <- sparseDiCA(DATA = math_q_fac, 
               design = y,
               ca.type = "mca", components = K, 
               make_data_nominal = TRUE,
               make_design_nominal = TRUE,
               rdsLeft = rep(rdsleftopt, K), 
               rdsRight = rep(rdsrightopt, K), 
               grpLeft = NULL, grpRight = rep(grp, each = 2))

sdimca.eig <- data.frame(
  eig = res.sparseDiMCA$eig,
  tau =  res.sparseDiMCA$eig /
    sum(res.dimca$Fixed.Data$TExPosition.Data$eigs))

scree.plot <- PlotMyScreeTikz(
  sdimca.eig, cex = 2, text.cex = 8, 
  lwd = 0.5, color.sig = rep(c("#42376B", "grey70"), 2:1))+ 
  theme(
    axis.title = element_text(size = 8, color = "#42376B"), 
    axis.text = element_text(size = 8, color = "#42376B"), 
    panel.border = element_rect(
      size = 1.5, fill = NA, color = "#42376B"))

scree.plot
  
```


## factor scores

```{r}
sdimca.fi <- res.sparseDiMCA$fi
sdimca.fi[, 1] <- - sdimca.fi[, 1] # Flip the first
sdimca.fii <- res.sparseDiMCA$fii
sdimca.fii[, 1] <- - sdimca.fii[, 1] # Flip the first
sdimca.fj <- res.sparseDiMCA$fj
sdimca.fj[, 1] <- - sdimca.fj[, 1] # Flip the first

colnames(sdimca.fii) <- paste0("Component ", c(1:3))
colnames(sdimca.fi) <- paste0("Component ", c(1:3))
colnames(sdimca.fj) <- paste0("Component ", c(1:3))


sdimca.boot <- Boot4Mean(sdimca.fii, y)$BootCube
colnames(sdimca.boot) <- paste0("Component ", c(1:ncol(sdimca.boot)))

```

## plot
```{r}
## Labels
sdimca.label12 <- createxyLabels.gen.tikz(
  1, 2,
  lambda = res.sparseDiMCA$eig,
  tau = round(100*res.sparseDiMCA$eig/
                sum(res.dimca$Fixed.Data$TExPosition.Data$eigs)),
  axisName = "Component ",
  hat = TRUE
)


sdimcaCI.12 <- MakeCIEllipses(
  sdimca.boot, axis1 = 1, axis2 = 2, 
  names.of.factors = paste0("Component ", 1:2),
  col = grade.col[rownames(sdimca.boot)],
  p.level = .95, line.size = 0.2, 
  alpha.line = 0.2, alpha.ellipse = 0.05)

## Biplot
sdimca.adjust <- createFactorMapIJ(
  sdimca.fi, 
  sdimca.fj, axis1 = 1, axis2 = 2,
  text.cex.i = 2, cex.i = 1, pch.i = 16, alpha.points.i = 1,
  cex.j = 4, alpha.poin.j = 1,
  col.background = NULL,
  col.axes = "#42376B",
  width.axes = 0.5,
  label.axisName = "Component ",
  alpha.axes = 0.5,
  col.points.i = grade.col,
  col.labels.i = grade.col,
  title = "sDiMCA: factor scores of \ngrades (rows)", 
  constraints = list(
    minx = -0.4, 
    miny = -0.13, 
    maxx = 0.35, 
    maxy = 0.07))

sdimca.fii.plot12 <- createFactorMap(
  sdimca.fii,
  axis1 = 1, axis2 = 2,
  constraints = minmaxHelper(sdimca.fii, sdimca.fj, axis1 = 1, axis2 = 2),
  col.points = grade.col[y], 
  alpha.points = 0.2)

sdimca.plot12 <- createFactorMapIJ(
  sdimca.fi, 
  sdimca.fj,
  axis1 = 1, axis2 = 2,
  text.cex.i = 2, cex.i = 2, 
  pch.i = 16, alpha.points.i = 1,
  cex.j = 4, alpha.poin.j = 1,
  col.points.i = grade.col,
  col.labels.i = grade.col,
  title = "sDiMCA: factor scores of \nboth grades and items (biplot)")

# sdimca.fii.plot12$zeMap_background + sdimca.fii.plot12$zeMap_dots + sdimcaCI.12 + sdimca.plot12$I_labels + sdimca.plot12$I_points + sdimca.label12

sdimca.fi.plot <- sdimca.adjust$baseMap + sdimcaCI.12 + sdimca.plot12$I_labels + sdimca.plot12$I_points + sdimca.label12+ theme(axis.title = element_text(size = 8, color = "#42376B"), axis.text = element_text(size = 8, color = "#42376B"), title = element_text(size = 8, color = "#42376B"), panel.border = element_rect(size = 1.5, color = "#42376B", fill = NA))


## Only Fj
sdimcaj.plot12 <- createFactorMap(
  sdimca.fj,
  axis1 = 1, axis2 = 2, 
  text.cex = 3, cex = 2,
  col.points = rep(grp.col, e = 2),
  col.labels = rep(grp.col, e = 2),
  col.background = NULL,
  col.axes = "#42376B",
  width.axes = 0.5,
  label.axisName = "Component ",
  alpha.axes = 0.5,
  title = "sDiMCA: factor scores of \nquestions (columns)",
  pch = 16, 
  constraints = list(
    minx = -0.4, 
    miny = -0.13, 
    maxx = 0.35, 
    maxy = 0.07))#,

sdimca.fj.plot <- sdimca.adjust$baseMap + sdimcaj.plot12$zeMap_dots + sdimcaj.plot12$zeMap_text + sdimca.label12 + theme(axis.title = element_text(size = 8, color = "#42376B"), axis.text = element_text(size = 8, color = "#42376B"), title = element_text(size = 8, color = "#42376B"), panel.border = element_rect(size = 1.5, color = "#42376B", fill = NA)) + ggtitle("sDiMCA: factor scores of \nquestions (columns)")

grp.twotimes <- rep(grp, each = 2)

# 
# PrettyBarPlot2(
#   res.sparseDiMCA$fj[order(grp.twotimes), 1], 
#   threshold = 0, 
#   color4bar = rep(grp.col, each = 2)[order(grp.twotimes)])

dimca.fj.dat <- as_tibble(
  data.frame(res.dimca$Fixed.Data$TExPosition.Data$fj),
  rownames = "labels") %>%
  mutate(
    group = grp.twotimes,
    col4grp = rep(grp.col, each = 2)) %>%
  arrange(labels) %>%
  mutate(
    col4grp_untouched = col4grp,
    col4grp = colorspace::lighten(
      col4grp,
      rep(c(0.5, 0), length(grp.col)))) %>%
  arrange(factor(
    group, 
    levels = c("Algebra", "Visual", "Arith", "CatRang", "DecFracPerc"))) %>%
  mutate(IDnum = 1:n())


DiMCA.fj1.plot <- PrettyBarPlot.MuSu.Lev(
  dimca.fj.dat$IDnum, 
  dimca.fj.dat$X1, 
  grp = dimca.fj.dat$group,
  color4bars = dimca.fj.dat$col4grp,
  color4groupLabels = setNames(unique(dimca.fj.dat$col4grp_untouched), unique(dimca.fj.dat$group)),
  label.bar = "",
  grp.label.size = 1.8,
  grp.label.position = 0.6,
  bar.label.size = 1.25,
  title = "DiMCA: factor scores of\n variable levels (columns)",
  ylab = "Component 1") + 
  theme(
    axis.title = element_text(size = 8, color = "#42376B"), 
    axis.text = element_text(size = 8, color = "#42376B"),
    title = element_text(size = 8, color = "#42376B"))

DiMCA.fj2.plot <- PrettyBarPlot.MuSu.Lev(
  dimca.fj.dat$IDnum, 
  dimca.fj.dat$X2, 
  grp = dimca.fj.dat$group, 
  color4bars = dimca.fj.dat$col4grp,
  color4groupLabels = setNames(unique(dimca.fj.dat$col4grp_untouched), unique(dimca.fj.dat$group)),
  label.bar = "",
  grp.label.size = 1.8,
  grp.label.position = 0.23,
  bar.label.size = 1.25,
  title = "DiMCA: factor scores of\n variable levels (columns)",
  ylab = "Component 2") + 
  theme(
    axis.title = element_text(size = 8, color = "#42376B"), 
    axis.text = element_text(size = 8, color = "#42376B"),
    title = element_text(size = 8, color = "#42376B"))

sdimca.fj.dat <- as_tibble(
  data.frame(res.sparseDiMCA$fj),
  rownames = "labels") %>%
  mutate(
    group = grp.twotimes,
    col4grp = rep(grp.col, each = 2)) %>%
  arrange(labels) %>%
  mutate(
    col4grp_untouched = col4grp,
    col4grp = colorspace::lighten(
      col4grp,
      rep(c(0.5, 0), length(grp.col)))) %>%
  arrange(factor(
    group, 
    levels = c("Algebra", "Visual", "Arith", "CatRang", "DecFracPerc"))) %>%
  mutate(IDnum = 1:n())


sDiMCA.fj1.plot <- PrettyBarPlot.MuSu.Lev(
  sdimca.fj.dat$IDnum, 
  -sdimca.fj.dat$X1, 
  grp = sdimca.fj.dat$group, 
  color4bars = sdimca.fj.dat$col4grp,
  color4groupLabels = setNames(unique(sdimca.fj.dat$col4grp_untouched), unique(sdimca.fj.dat$group)),
  label.bar = "",
  grp.label.size = 1.8,
  grp.label.position = 0.8,
  bar.label.size = 1.25,
  title = "sDiMCA: factor scores of\n variable levels (columns)",
  ylab = "Component 1") + 
  theme(
    axis.title = element_text(size = 8, color = "#42376B"), 
    axis.text = element_text(size = 8, color = "#42376B"),
    title = element_text(size = 8, color = "#42376B"))

# labelsCheating <- sdimca.fj.dat$labels
# labelsCheating[sdimca.fj.dat$group == "Algebra"] <- ""
sDiMCA.fj2.plot <- PrettyBarPlot.MuSu.Lev(
  x = sdimca.fj.dat$IDnum, 
  y = sdimca.fj.dat$X2, 
  grp = sdimca.fj.dat$group, 
  color4bars = sdimca.fj.dat$col4grp,
  color4groupLabels = setNames(unique(sdimca.fj.dat$col4grp_untouched), unique(sdimca.fj.dat$group)),
  label.bar = "",
  grp.label.size = 1.8,
  grp.label.position = 0.165,
  bar.label.size = 1.25,
  title = "sDiMCA: factor scores of\n variable levels (columns)",
  ylab = "Component 2") + 
  theme(
    axis.title = element_text(size = 8, color = "#42376B"), 
    axis.text = element_text(size = 8, color = "#42376B"),
    title = element_text(size = 8, color = "#42376B"))

DiMCA.fj1.plot
DiMCA.fj2.plot
sDiMCA.fj1.plot
sDiMCA.fj2.plot
```

## Figure TikZ

```{r create tikz}

### Put ABC labels
scree.grob <- arrangeGrob(scree.plot,
    top = textGrob(
      expression(bold("A")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

sigrob <- arrangeGrob(siplot,
    top = textGrob(
      expression(bold("B")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

dimca.fi.grob <- arrangeGrob(dimca.fi.plot,
    top = textGrob(
      expression(bold("C")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

sdimca.fi.grob <- arrangeGrob(sdimca.fi.plot,
    top = textGrob(
      expression(bold("D")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

dimca.fj.grob1 <- arrangeGrob(DiMCA.fj1.plot,
    top = textGrob(
      expression(bold("E")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

sdimca.fj.grob1 <- arrangeGrob(sDiMCA.fj1.plot,
    top = textGrob(
      expression(bold("F")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

dimca.fj.grob2 <- arrangeGrob(DiMCA.fj2.plot,
    top = textGrob(
      expression(bold("G")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

sdimca.fj.grob2 <- arrangeGrob(sDiMCA.fj2.plot,
    top = textGrob(
      expression(bold("H")),
      x = unit(0, "npc"),
      y = unit(1, "npc"), 
      just = c("left", "top")))

bigGrob <- gridExtra::grid.arrange(
  grobs = list(scree.grob, sigrob, 
               dimca.fi.grob, sdimca.fi.grob,
               dimca.fj.grob1, sdimca.fj.grob1,
               dimca.fj.grob2, sdimca.fj.grob2),
  widths = c(0.5, 0.5),
  heights = c(0.3, 0.37, 0.25, 0.25),
  layout_matrix = rbind(c(1, 2),
                        c(3, 4),
                        c(5, 6),
                        c(7, 8))
)
tf <- "Figure_sparseDiMCA_20220929.tex"

# Save a TeX file
tikz(tf, standAlone = TRUE)
grid.newpage()
grid.draw(bigGrob)
dev.off()

# View the output
tools::texi2dvi(tf, pdf = TRUE)
system(paste(getOption('pdfviewer'), "Figure_sparseDiMCA_20220929.pdf"))


# png(filename="Figure-sdimca.png", width = 170, height = 200, units = "mm", bg = "white",res = 600)
# 
# dev.off()
```
